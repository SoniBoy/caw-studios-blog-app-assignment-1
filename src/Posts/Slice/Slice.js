import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchPosts, fetchPost, fetchComments } from "../Api/Api";

const initialState = {
  posts: [],
  postsStatus: "idle",
  post: null,
  postStatus: "idle",
  comments: [],
  commentsStatus: "idle",
  filteredPosts: [],
  selectedPostTitle: "",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getPosts = createAsyncThunk("post/getPosts", async () => {
  const response = await fetchPosts();
  // The value we return becomes the `fulfilled` action payload
  return response.data;
});

export const getPost = createAsyncThunk("post/getPost", async (postId) => {
  const response = await fetchPost(postId);
  return response.data;
});

export const getComments = createAsyncThunk(
  "post/getComments",
  async (postId) => {
    const response = await fetchComments(postId);
    return response.data;
  }
);

export const postSlice = createSlice({
  name: "post",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    searchByTitle: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      if (action.payload) {
        state.filteredPosts = state.posts.filter((post) =>
          post.title.includes(action.payload)
        );
      } else {
        state.filteredPosts = state.posts;
      }
    },
    setSelectedPostTitle: (state, action) => {
      state.selectedPostTitle = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getPosts.pending, (state) => {
        state.postsStatus = "loading";
      })
      .addCase(getPosts.fulfilled, (state, action) => {
        state.postsStatus = "idle";
        state.posts = action.payload;
        state.filteredPosts = action.payload;
      })
      .addCase(getPost.fulfilled, (state, action) => {
        state.post = action.payload;
        state.selectedPostTitle = action.payload.title;
      })
      .addCase(getComments.fulfilled, (state, action) => {
        state.comments = action.payload;
      });
  },
});

export const { searchByTitle, setSelectedPostTitle } = postSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectPosts = (state) => state.post.filteredPosts;
export const selectPost = (state) => state.post.post;
export const selectComments = (state) => state.post.comments;
export const selectPostTitle = (state) => state.post.selectedPostTitle;

export default postSlice.reducer;
